/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
 */
package com.pavas.learning;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Sum3 {
  public static void main(String[] args){
    System.out.println(get3sum(new int[]{-1, 0, 1, 2, -1, -4}));

  }

  public static Set<List<Integer>> get3sum(int[] numbers) {
    Set<List<Integer>> output = new HashSet<>();
    if(numbers.length < 3) {
      return output;
    }
    for(int i=0; i<numbers.length-2; i++) {
      for(int j=i+1; j < numbers.length-1; j++) {
        for(int k=j+1; k < numbers.length; k++) {
            if((numbers[i] + numbers[j] + numbers[k]) == 0) {
              List<Integer> triples = Arrays.asList(numbers[i], numbers[j], numbers[k]);
              Collections.sort(triples);
              output.add(triples);
            }
        }
      }
    }
    return  output;
  }
}
