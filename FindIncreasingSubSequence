/*Given an array of unsorted integers, return the length of its longest increasing subsequence.
 
Ex: Given the following array numsâ€¦
nums = [1, 9, 7, 4, 7, 13], return 4.
The longest increasing subsequence is 1, 4, 7, 13.
*/

package com.pavan.dp;

import java.util.Arrays;

public class IncreasingSubSequence {
  int[] nums = new int[] {1, 9, 7, 4, 7, 13};
  public static void main(String[] args) {
    IncreasingSubSequence increasingSubSequence = new IncreasingSubSequence();
    System.out.println(increasingSubSequence.subseqLength());
  }

  public int subseqLength() {
    int[] lengths = new int[nums.length];
    Arrays.fill(lengths, 1);

    for(int i=0; i < nums.length; i++) {
      for(int j=0; j < i; j++){
        // Calculate the max increasing length possible ending at j
        if(nums[i] > nums[j]) {
          lengths[i] = Math.max(lengths[i], lengths[j]+1);
        }
      }
    }
    int max=0;
    for(int value : lengths){
      max = Math.max(max, value);
    }
    return max;
  }
}
