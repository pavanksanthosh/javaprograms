/*
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
*/

package com.pavan.programs;

import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

public class ValidSudoku {
  public boolean isValidSudoku(char[][] board) {
    // Each Row
    for(int row=0; row < board.length; row++) {
      if(!isValid(row, 0, 0, board[row].length, board)){
        return false;
      }
    }

    // Each Column
    for(int col=0; col < board[0].length; col++) {
      if(!isValid(0, board.length, col, 0, board)){
        return false;
      }
    }

    // Every sub 3x3 boxes
    for(int row=0; row < board.length; row+=3){
      for(int col=0; col < board[row].length; col+=3) {
        if(!isValid(row, 3, col, 3, board)) {
          return false;
        }
      }
    }
    return true;
  }

  private boolean isValid(int row, int rowlength, int col, int collength, char[][]board) {
    Set seen = new HashSet();
    for(int i = row;i < row + rowlength; i++) {
      for(int j = col;j < col + collength; j++) {
        if(seen.contains(board[i][j]) && board[i][j] != '.') {
          return false;
        } else {
          seen.add(board[i][j]);
        }
      }
    }
    return true;
  }

  public static void main(String[] args) {
    char[][] board = {
      {'.', '.', '4', '.', '.', '.', '6', '3', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'5', '.', '.', '.', '.', '.', '.', '9', '.'},
      {'.', '.', '.', '5', '6', '.', '.', '.', '.'},
      {'4', '.', '3', '.', '.', '.', '.', '.', '1'},
      {'.', '.', '.', '7', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '5', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.'},
      {'.', '.', '.', '.', '.', '.', '.', '.', '.'}
    };
    ValidSudoku validSudoku = new ValidSudoku();
    System.out.println(validSudoku.isValidSudoku(board));
  }
}
