/*
Given a pattern and a string s, find if s follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in s.

 

Example 1:

Input: pattern = "abba", s = "dog cat cat dog"
Output: true
Example 2:

Input: pattern = "abba", s = "dog cat cat fish"
Output: false
Example 3:

Input: pattern = "aaaa", s = "dog cat cat dog"
Output: false
*/

package com.pavan.programs;

import java.util.HashMap;

public class WordPattern {
  public boolean wordPattern(String pattern, String s) {
    HashMap<Character, String> map = new HashMap<>();
    HashMap<String, Character> map1 = new HashMap<>();

    String[] strings = s.split(" ");
    if(pattern.length() != strings.length) {
      return false;
    }
    for(int i=0; i < strings.length; i++) {
      if(map.containsKey(pattern.charAt(i))) {
        if(!map.getOrDefault(pattern.charAt(i),"").equals(strings[i])) {
          return false;
        }
      } else {
        map.put(pattern.charAt(i), strings[i]);
      }

      if(map1.containsKey(strings[i])) {
        if(!map1.getOrDefault(strings[i],new Character('`')).equals(pattern.charAt(i))) {
          return false;
        }
      } else {
        map1.put(strings[i], pattern.charAt(i));
      }
    }
    return true;
  }

  public static void main(String[] args) {
    WordPattern wordPattern = new WordPattern();
    System.out.println(wordPattern.wordPattern("abba", "dog cat cat dog"));
  }
}
